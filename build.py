import sys
import subprocess
import os
import pathlib as path
import platform

is_first_exec = False   

def command(com: str, error: str = "command error"):
    try:
        result = subprocess.run(com.split(" "), check=True)
    except subprocess.CalledProcessError as e:
        print(error)
        print(e)
        exit(1)

argv = sys.argv

with open(argv[0], "r+") as f:
    lines = f.readlines()
    f.seek(0)
    if "True" in lines[6]:
        lines[6] = lines[6].replace("True", "False")
        for line in lines:
            f.write(line)

if is_first_exec:
    command("rustup target add x86_64-unknown-none")
    command("rustup component add rust-src")

if len(argv) != 2:
    print("you must call this file with task\n" \
    "example: \"python3 build.py new\"\n" \
    "TASKS: new(generate ISO), clean(delete all " \
    "files generated by new)")

    exit(1)

elif argv[1] == "new":
    current_os: str
    if "Windows" in platform.platform():
        current_os = "windows"
    else:
        current_os = "unix"

    out_dir = path.Path("out")
    out_dir.mkdir()

    linker_script = path.Path("kernel").joinpath("src").joinpath("kernel.ld")
    
    loader_asm = path.Path("loader").joinpath("loader.asm")
    loader_bin = out_dir.joinpath("loader").joinpath("loader.bin")
    loader_ko = path.Path("iso").joinpath("boot").joinpath("loader").joinpath("loader.ko")

    kernel_elf = path.Path("iso").joinpath("boot").joinpath("kernel.elf")

    class libraries:
        libs_to_stat: str
        static_lib = out_dir.joinpath("libABI.a")    
        asm = (
            path.Path("io").joinpath("src").joinpath("io.asm"),
            path.Path("ports").joinpath("src").joinpath("ports.asm") 
        )
        res = (
            out_dir.joinpath("io.o"),
            out_dir.joinpath("ports.o")
        )

        def __init__(self):
            for lib in self.asm:
                self.libs_to_stat += lib + " "
        
    libs = libraries()
    
    command(f"nasm -f bin {loader_asm} -o ", 
        f"error compilation {loader_asm}")
    
    command(f"dd if={loader_bin} of={loader_ko} bs=2048 conv=sync",
        f"error while generating {loader_ko}")
    
    for i in range(len(libs.asm)):
        command(f"nasm -f elf64 {libs.asm[i]} -o {libs.res[i]}",
            f"can't compile {libs.asm[i]}, maybe you haven't nasm compiler")

    command(f"ar crs {libs.static_lib} {libs.libs_to_stat}",
        f"error while creating static lib {libs.static_lib}, maybe you haven't ar program")

    command(f"rustc --target=x86_64-unknown-none \
        -C linker-flavor=ld \
        -C link-arg=-T{linker_script} \
        -C link-arg=-L{out_dir} \
        -C link-arg=-lABI \
        -C link-arg=-e_start \
        -o {kernel_elf}",
        
        f"error while compilation {kernel_elf}")
    
    prog = "xorriso as mkisofs"
    flags = "-R -J -no-emul-boot -boot-load-size 4"
    iso = "BOS.iso"

    command(f"{prog} -b \"{loader_ko}\" {flags} -o {iso} ./iso",
        "error while generating ISO")

    out_dir.rmdir()

elif argv[1] == "clean":
    files_to_remove = (
        path.Path("iso").joinpath("boot").joinpath("loader").joinpath("loader.ko"),
        path.Path("iso").joinpath("boot").joinpath("kernel.elf"),
        path.Path("BOS.iso")
    )
    
    for file in files_to_remove:
        try:
            os.remove(file)
        except:
            print(f"no such file or directory {file}")

else:
    print("TASKS: new(generate ISO), " \
    "clean(delete all files generated by new)")

    exit(1)