import sys
import subprocess
import os
from pathlib import Path
import platform
import shutil

is_first_exec = True                                     

def command(com: str, error: str = "command error"):
    try:
        result = subprocess.run(com.split(" "), check=True)
    except subprocess.CalledProcessError as e:
        print(error)
        print(e)
        exit(1)

argv = sys.argv

if len(argv) != 2:
    print("TASKS: new(generate ISO), " \
    "clean(delete all files generated by new)")

    exit(1)

with open(argv[0], "r+") as f:
    lines = f.readlines()
    f.seek(0)
    if "True" in lines[7]:
        lines[7] = lines[7].replace("True", "False")
        for line in lines:
            f.write(line)

if is_first_exec and argv[1] == "new":
    os.remove(Path("iso").joinpath("boot").joinpath("loader").joinpath(".gitkeep"))
    try:
        subprocess.run("rustup default nightly".split(" "))
    except:
        command("rustup install nightly")
        command("rustup default nightly")

    command("rustup target add x86_64-unknown-none")
    command("rustup component add rust-src")

if len(argv) != 2:
    print("you must call this file with task\n" \
    "example: \"python3 build.py new\"\n" \
    "TASKS: new(generate ISO), clean(delete all " \
    "files generated by new)")

    exit(1)

elif argv[1] == "new":
    current_os: str
    if "Windows" in platform.platform():
        current_os = "windows"
    else:
        current_os = "unix"

    command("cargo build -p kernel --target=x86_64-unknown-none",
            "you haven't cargo")
    out_dir = Path("out")
    if not out_dir.exists():
        out_dir.mkdir()

    try:
        loader_asm = Path("loader").joinpath("loader.asm")
        loader_bin = out_dir.joinpath("loader.bin")
        loader_ko = Path("iso").joinpath("boot").joinpath("loader").joinpath("loader.ko")

        command(f"nasm -f bin {loader_asm} -o {loader_bin}", 
            f"error compilation {loader_asm}")
        
        command(f"dd if={loader_bin} of={loader_ko} bs=2048 conv=sync",
            f"error while generating {loader_ko}")
        
        prog = "xorriso as mkisofs"
        flags = "-R -J -no-emul-boot -boot-load-size 4"
        iso = "BOS.iso"

        loader_ko = Path("boot").joinpath("loader").joinpath("loader.ko")

        command(f"{prog} -b {loader_ko} {flags} -o {iso} ./iso",
            "error while generating ISO, maybe you haven't xorriso")

        shutil.rmtree(out_dir)
    except:
        shutil.rmtree(out_dir)

elif argv[1] == "clean":
    files_to_remove = (
        Path("iso").joinpath("boot").joinpath("loader").joinpath("loader.ko"),
        Path("iso").joinpath("boot").joinpath("kernel.elf"),
        Path("BOS.iso")
    )
    
    for file in files_to_remove:
        try:
            os.remove(file)
        except:
            print(f"no such file or directory {file}")