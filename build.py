import sys
import subprocess
import os
from pathlib import Path
import platform
import shutil

is_first_exec = True   

def command(com: str, error: str = "command error"):
    try:
        result = subprocess.run(com.split(" "), check=True)
    except subprocess.CalledProcessError as e:
        print(error)
        print(e)
        exit(1)
        shutil.rmtree(out_dir)
def commands_message():
    print("TASKS: new(generate ISO), " \
    "clean(delete all files generated by new), " \
    "test(start virtual machine(qemu)), " \
    "inttest(run integration tests)")

print('-' * 10, "\nWARGNING:\nfor use this script you need:" \
      "nasm compiler, cargo, rustup, xorriso(linux), qemu")
print('-' * 10, '\n')

out_dir = Path("out")



if not "64" in platform.architecture()[0]:
    print("this project only for x86_64 architecture")
    exit(0)

argv = sys.argv

if len(argv) != 2:
    commands_message()
    
    exit(1)

if argv[1] == "inttest":
    file = input("ENTER FILE FOR TEST ('all' - for files, see ./tests folder),\n" \
        "LIST OF TESTABLE ARGUMENTS:\n" \
        "io_test\narr_test\n")

    if file != "all":
        command(f"cargo test -p tests --test {file}")
    else:
        command("cargo test -p tests")
    
    exit(0)

if argv[1] == "new":
    if not out_dir.exists():
        out_dir.mkdir()
    if is_first_exec:
        try:
            os.remove(Path("iso").joinpath("boot").joinpath("loader").joinpath(".gitkeep"))
        except:
            pass
        try:
            subprocess.run("rustup default nightly".split(" "))
        except:
            command("rustup install nightly")
            command("rustup default nightly")
        
        target = Path("loader").joinpath("i686-unknown-none.json")
        
        command("rustup target add x86_64-unknown-none")
        command("rustup component add rust-src")
        
        with open(argv[0], "r+") as f:
            lines = f.readlines()
            f.seek(0)
            if "True" in lines[7]:
                lines[7] = lines[7].replace("True", "False")
                for line in lines:
                    f.write(line)

    current_os: str
    if "Windows" in platform.platform():
        current_os = "windows"
    else:
        current_os = "unix"

    try:
        loader_asm = Path("loader").joinpath("loader.asm")
        loader_bin = out_dir.joinpath("loader.bin")
        loader_ko = Path("iso").joinpath("boot").joinpath("loader").joinpath("loader.ko")
        
        loader_elf = out_dir.joinpath("loader.elf")

        loader_target = Path("loader").joinpath("i686-unknown-none.json")
        kernel_target = "x86_64-unknown-none"
        command(f"cargo build -Zbuild-std=core -p loader --release --target {loader_target}",
                f"error compilation loader")

        command(f"nasm -f bin {loader_asm} -o {loader_bin}", 
            f"error compilation {loader_asm}")
        
        command(f"dd if={loader_bin} of={loader_ko} bs=2048 conv=sync",
            f"error while generating {loader_ko}")
        
        command(f"cargo build -Zbuild-std=core -p kernel --release --target {kernel_target}",
            f"you haven't cargo")
        
        prog = "xorriso as mkisofs"
        flags = "-R -J -no-emul-boot -boot-load-size 4"
        iso = "BOS.iso"

        loader_ko = Path("boot").joinpath("loader").joinpath("loader.ko")

        command(f"{prog} -b {loader_ko} {flags} -o {iso} ./iso",
            "error while generating ISO, maybe you haven't xorriso")

        kernel_elf = out_dir.joinpath("kernel.elf")

        command(f"dd if={loader_elf} of={iso} conv=sync bs=2048 seek=50")
        command(f"dd if={kernel_elf} of={iso} conv=sync bs=2048 seek=64")
        
        shutil.rmtree(out_dir)

    except:
        shutil.rmtree(out_dir)

        exit(0)

elif argv[1] == "clean":
    command("cargo clean")
    files_to_remove = (
        Path("iso").joinpath("boot").joinpath("loader").joinpath("loader.ko"),
        Path("BOS.iso"),
    )
    if out_dir.exists():
        shutil.rmtree(out_dir)
    for file in files_to_remove:
        try:
            os.remove(file)
        except:
            print(f"no such file or directory {file}")

elif argv[1] == "test":
    start_qemu = " ".join([
        "qemu-system-x86_64",
        "-cdrom BOS.iso",
    ])
    print(start_qemu)
    command(start_qemu)

else:
    commands_message()

    exit(0)